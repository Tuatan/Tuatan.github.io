<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Vso | Sergey # Blog]]></title>
  <link href="http://sergeysharp.com/blog/categories/vso/atom.xml" rel="self"/>
  <link href="http://sergeysharp.com/"/>
  <updated>2016-02-22T22:26:58-08:00</updated>
  <id>http://sergeysharp.com/</id>
  <author>
    <name><![CDATA[Sergey Baranchenkov]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[VSO CI and CodeCov]]></title>
    <link href="http://sergeysharp.com/blog/2016/02/21/vso-ci-and-codecov/"/>
    <updated>2016-02-21T17:13:28-08:00</updated>
    <id>http://sergeysharp.com/blog/2016/02/21/vso-ci-and-codecov</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/">GitHub</a> supports a number of services with which you can integrate your repo. I have recently come across <a href="https://codecov.io/#features">CodeCov</a> that provides code coverage results and has a nice integration with the GitHub. I decided to try it out and here what I had to do.</p>

<h2>Prerequisites</h2>

<p>I have <a href="https://github.com/Microsoft/ApplicationInsights-server-dotnet">C# project hosted in the GitHub</a>, MsTest, VSO CI.
I granted access to my GitHub repo on the <a href="https://codecov.io">https://codecov.io</a> and got access key.</p>

<!--more-->


<h2>Nuget package</h2>

<p>First I looked at the <a href="https://github.com/codecov/example-csharp">sample repo</a>. When I scrolled through &ldquo;CI section&rdquo; and &ldquo;Combine test and code coverage&rdquo; it did not seem to be a one click integration&hellip; But the first instruction was very simple: install <a href="https://www.nuget.org/packages/OpenCover/">OpenCover nuget</a> package. When I installed I noticed that is has documentation in the package and well&hellip; when I started reading I almost decided not to proceed. In reality you do not need it when you start. It has a lot of useful information but it is more for fine-tuning.</p>

<h2>Powershell script</h2>

<p>Next step in the instructions is a Powershell script that creates coverage file and uploads it to CodeCov.
Here is <a href="https://github.com/Microsoft/ApplicationInsights-server-dotnet/blob/develop/CodeCov.ps1">my script</a>:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>..\packages\OpenCover.4.6.519\tools\OpenCover.Console.exe -register:user
</span><span class='line'>    &ldquo;-target:C:\Program Files (x86)\Microsoft Visual Studio 14.0\Common7\IDE\CommonExtensions\Microsoft\TestWindow\vstest.console.exe&rdquo;
</span><span class='line'>    &ldquo;-targetargs:..\a\Release\Src\DependencyCollector\Net40.Tests\Microsoft.ApplicationInsights.DependencyCollector.Net40.Tests.dll  [CUT: all assemblies]&lt;br/>
</span><span class='line'>    ..\a\Release\Src\WindowsServer\WindowsServer.Nuget.Tests\WindowsServer.Nuget.Tests.dll /TestCaseFilter:TestCategory!=Required_4_5_1 /logger:trx&rdquo;
</span><span class='line'>    &ldquo;-filter:+[Microsoft.AI&lt;em>]&lt;/em> -[&lt;em>Tests]&lt;/em> -[&lt;em>TestFramework&lt;/em>]&lt;em> -[&lt;/em>]Microsoft.ApplicationInsights.Extensibility.Implementation.External*&rdquo; -hideskipped:All -output:.\coverage.xml&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>(New-Object System.Net.WebClient).DownloadFile(&ldquo;&lt;a href="https://codecov.io/bash">https://codecov.io/bash&lt;/a>&rdquo;, &ldquo;.\CodecovUploader.sh&rdquo;)&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>$lastCommit = $(git rev-parse HEAD)&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>$branchNames = $(git branch &ndash;all &ndash;contains $lastCommit)&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>$i=0
</span><span class='line'>Foreach ($branchName in $branchNames)
</span><span class='line'>{
</span><span class='line'>    $i++
</span><span class='line'>    if ($i -gt 1)
</span><span class='line'>    {
</span><span class='line'>        $branchName = $branchName.Trim()
</span><span class='line'>        $lastCommitOnBranch = $(git rev-parse $branchName)
</span><span class='line'>        if ($lastCommitOnBranch -eq  $lastCommit)
</span><span class='line'>        {
</span><span class='line'>            if ($branchName.StartsWith(&ldquo;remotes/origin/&rdquo;))
</span><span class='line'>            {
</span><span class='line'>                $branchName = $branchName.Substring(&ldquo;remotes/origin/&rdquo;.Length)
</span><span class='line'>            }&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>        .\CodecovUploader.sh -f coverage.xml -t $env:CODECOVACCESSKEY -X gcov -B $branchName
</span><span class='line'>    }
</span><span class='line'>}
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>}</span></code></pre></td></tr></table></div></figure></p>

<p>It took me some time to get to it :) So let&rsquo;s look at it line by line:</p>

<h3>1. Run tests</h3>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>..\packages\OpenCover.4.6.519\tools\OpenCover.Console.exe -register:user
</span><span class='line'>    &ldquo;-target:C:\Program Files (x86)\Microsoft Visual Studio 14.0\Common7\IDE\CommonExtensions\Microsoft\TestWindow\vstest.console.exe&rdquo;
</span><span class='line'>    &ldquo;-targetargs:..\a\Release\Src\DependencyCollector\Net40.Tests\Microsoft.ApplicationInsights.DependencyCollector.Net40.Tests.dll  [CUT: all assemblies]&lt;br/>
</span><span class='line'>    ..\a\Release\Src\WindowsServer\WindowsServer.Nuget.Tests\WindowsServer.Nuget.Tests.dll /TestCaseFilter:TestCategory!=Required_4_5_1 /logger:trx&rdquo;
</span><span class='line'>    &ldquo;-filter:+[Microsoft.AI&lt;em>]&lt;/em> -[&lt;em>Tests]&lt;/em> -[&lt;em>TestFramework&lt;/em>]&lt;em> -[&lt;/em>]Microsoft.ApplicationInsights.Extensibility.Implementation.External*&rdquo; -hideskipped:All -output:.\coverage.xml</span></code></pre></td></tr></table></div></figure></p>

<p>Here I run <code>OpenCover.Console.exe</code> that is unpacked to the package folder during build. You can check description of all arguments <a href="https://github.com/OpenCover/opencover/wiki/Usage">here</a>.</p>

<p>I think I do not need <code>register</code>. I will try to remove it in the next version. I just kept it from the sample that I used as a start point.</p>

<p>In <code>target</code> and <code>targetargs</code> you specify how to run tests. I opened my VSO build, opened test step and copied the command from there.</p>

<p>In <code>targetargs</code> I specify list of all test assemblies. Notice how &ldquo;&rdquo; are placed. It is important! Opening &ldquo; should be before the argument or it will not work.</p>

<p><code>/TestCaseFilter</code> is also an argument for <code>vstest.console.exe</code>. I need it for skipping some tests. If you need other vstest arguments read <a href="https://msdn.microsoft.com/en-us/library/jj155800.aspx">this</a></p>

<p><code>-filter:+[Microsoft.AI*]* -[*Tests]* -[*TestFramework*]* -[*]Microsoft.ApplicationInsights.Extensibility.Implementation.External*</code> <a href="https://github.com/OpenCover/opencover/wiki/Usage#understanding-filters">means</a> include all types from assemblies which names start with &ldquo;Microsoft.AI&rdquo; except all assemblies that have &ldquo;Tests&rdquo; or &ldquo;TestFramework&rdquo; in the name (otherwise you wound measure code coverage of unit test projects). Also exclude all types from all assemblies where namespace starts with &ldquo;Microsoft.ApplicationInsights.Extensibility.Implementation.External&rdquo;.</p>

<p>You can improve this by:</p>

<ul>
<li>Pass package folder as a parameter. But I was not sure how to propagate properties from MsBuild step to a Powershell step and did not want to spend much time on it.</li>
<li>OpenCover package version is hardcoded meaning that there will be problems with upgrade.</li>
<li>Path to vstest.console.exe should also be taken from the environment variable. That should be easy: read <a href="https://msdn.microsoft.com/en-us/Library/vs/alm/Build/scripts/variables">this</a>.</li>
</ul>


<h3>2. Download the results</h3>

<p>Second line is downloading coverage results uploader:
<code>
(New-Object System.Net.WebClient).DownloadFile("https://codecov.io/bash", ".\CodecovUploader.sh")
</code></p>

<h3>3. Upload the results</h3>

<p>Now an interesting part starts :) When I was just uploading coverage results (by running <code>CodecovUploader.sh</code>) it was attaching it to a <a href="https://github.com/codecov/example-csharp/issues/9">master branch</a> while I was actually compiling my private branch. What was happening is that VSO instead of just checking out a branch was checking out a commit so branch was in the detached state (so &ldquo;git rev-parse&rdquo; would not work).</p>

<p>So what I am doing next is I take last commit of this detached branch and try to figure out on what branch (branches) that commit is the last one and then upload code coverage results on all these branches. If you know an easier way please post a comment! :)</p>

<p>Get last commit of detached branch:
<code>$lastCommit = $(git rev-parse HEAD)</code></p>

<p>Get all branches that have this commit:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$branchNames = $(git branch &ndash;all &ndash;contains $lastCommit)</span></code></pre></td></tr></table></div></figure></p>

<p>Note that</p>

<ol>
<li>If you just created a local branch from a develop branch and did not make any changes you would have last commit present in your branch and in develop. On both branches that would be the last commit and code coverage would apply to both.</li>
<li>If you have your local branch and made some changes you would have your last commit be present only in one branch.</li>
<li>In reality this command also always returns &ldquo;master detached&rdquo; as a first element. We would need to skip it.</li>
</ol>


<p>For each branch that has our commit from detached branch (except the first one which is &ldquo;detached master&rdquo;) check that our commit is the last commit for the branch, if yes than upload result:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$i=0
</span><span class='line'>Foreach ($branchName in $branchNames)
</span><span class='line'>{
</span><span class='line'>    $i++
</span><span class='line'>    if ($i -gt 1)
</span><span class='line'>    {
</span><span class='line'>        $branchName = $branchName.Trim()
</span><span class='line'>        $lastCommitOnBranch = $(git rev-parse $branchName)
</span><span class='line'>        if ($lastCommitOnBranch -eq  $lastCommit)
</span><span class='line'>        {
</span><span class='line'>            if ($branchName.StartsWith(&ldquo;remotes/origin/&rdquo;))
</span><span class='line'>            {
</span><span class='line'>                $branchName = $branchName.Substring(&ldquo;remotes/origin/&rdquo;.Length)
</span><span class='line'>            }&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>        .\CodecovUploader.sh -f coverage.xml -t $env:CODECOVACCESSKEY -X gcov -B $branchName
</span><span class='line'>    }
</span><span class='line'>}
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>}</span></code></pre></td></tr></table></div></figure></p>

<p>Note:</p>

<ul>
<li>You have to Trim branch name; it has leading spaces and &ldquo;git rev-parse&rdquo; would fail without it.</li>
<li>You have to cut &ldquo;remotes/origin/&rdquo; from a branch name because CodeCov does not understand it.</li>
<li><code>$env:CODECOVACCESSKEY</code> is your access key that you get from <a href="https://codecov.io.">https://codecov.io.</a> It is <a href="https://msdn.microsoft.com/en-us/Library/vs/alm/Build/scripts/variables">passed as a variable to the script</a>. You can also pass it as a Powershell script argument if you like.</li>
<li><code>CodecovUploader.sh</code> needs to be run from the git repo root. If you try to do that from a different folder, it will fail. Interestingly enough it opens a new console window, does some magic and immediately closes so if it failed you do not know why. I wonder if there is a good way to detect problems&hellip; <a href="https://github.com/codecov/codecov-bash/blob/346e91cb2918fd1d84fde46c0814ae2005fee363/codecov">Here</a> is the list of arguments if you want to check yourself.</li>
</ul>


<p>And Voila! Report is there! :)</p>

<p><img class="center" src="/images/CoverageChanged4.PNG"></p>

<h2>Visualization</h2>

<ul>
<li>I added a badge to my repo main page. To get a badge open you repo info <code>https://codecov.io/[YourRepo]</code>. Click on the gear button -> badge. Insert markdown code to your readme.md.</li>
</ul>


<p>You will see something like that:
<img class="center" src="/images/CodeCovBadge.PNG"></p>

<ul>
<li>Install <a href="https://github.com/codecov/browser-extension#codecov-extension">browser extension</a> to see pull request statistics right on the github.</li>
</ul>


<p>On the top of your pull request you will see something like this:
<img class="center" src="/images/CoverageChanged3.PNG"></p>

<p>&hellip; and for each changed file:
<img class="center" src="/images/CoverageChanged2.PNG"></p>

<h2>What I did not like</h2>

<ul>
<li>Tests are executed twice. Once when you run tests in the scope of your build and then to get code coverage. That increases build time. In my case we have 700 unit tests. Build time without code coverage is 9 minutes. With it 14. It is not a big deal with 3 people in the team. But if that would be 10 people with build time increase from 20 to 25 I would doubt if I should add it (Also tests run longer, I had to increase timeouts for some tests) .</li>
<li>I&rsquo;m actually using IE &hellip; at work :) I want to have IE extension.</li>
<li>I did not find anything about reports retention policy and did not find how to delete reports.</li>
<li>Well&hellip; It was not really a one click experience since I have VSO CI</li>
<li>Troubleshooting of uploader. I hope I never need it because I would not know immediately how to do this. Also in case of CI I would not even notice that when it got broken if I do not check it for each pull request.</li>
<li>Test containers need to be excluded from the results. It would be nice to exclude them by default.</li>
</ul>

]]></content>
  </entry>
  
</feed>
