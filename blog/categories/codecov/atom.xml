<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Codecov | Sergey # Blog]]></title>
  <link href="http://sergeysharp.com/blog/categories/codecov/atom.xml" rel="self"/>
  <link href="http://sergeysharp.com/"/>
  <updated>2016-02-22T10:45:29-08:00</updated>
  <id>http://sergeysharp.com/</id>
  <author>
    <name><![CDATA[Sergey Baranchenkov]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[VSO CI and CodeCov]]></title>
    <link href="http://sergeysharp.com/blog/2016/02/21/vso-ci-and-codecov/"/>
    <updated>2016-02-21T17:13:28-08:00</updated>
    <id>http://sergeysharp.com/blog/2016/02/21/vso-ci-and-codecov</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/">GitHub</a> supports a number of services with which you can integrate your repo. I have recently come across <a href="https://codecov.io/#features">CodeCov</a> that provides code coverage results and has a nice integration with the GitHub. I decided to try it out and here what I had to do.</p>

<h2>Prerequisites</h2>

<p>I have <a href="https://github.com/Microsoft/ApplicationInsights-server-dotnet">C# project hosted in the GitHub</a>, MsTest, VSO CI.
I granted access to my GitHub repo on the <a href="https://codecov.io">https://codecov.io</a> and got access key.</p>

<!--more-->


<h2>Nuget package</h2>

<p>First I looked at the <a href="https://github.com/codecov/example-csharp">sample repo</a>.</p>

<h2>Powershell script</h2>

<p>Next step in the instructions is a Powershell script that creates coverage file and uploads it to CodeCov.
Here is <a href="https://github.com/Microsoft/ApplicationInsights-server-dotnet/blob/develop/CodeCov.ps1">my script</a>:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>..\packages\OpenCover.4.6.519\tools\OpenCover.Console.exe -register:user
</span><span class='line'>    &ldquo;-target:C:\Program Files (x86)\Microsoft Visual Studio 14.0\Common7\IDE\CommonExtensions\Microsoft\TestWindow\vstest.console.exe&rdquo;
</span><span class='line'>    &ldquo;-targetargs:..\a\Release\Src\DependencyCollector\Net40.Tests\Microsoft.ApplicationInsights.DependencyCollector.Net40.Tests.dll  [CUT: all assemblies]&lt;br/>
</span><span class='line'>    ..\a\Release\Src\WindowsServer\WindowsServer.Nuget.Tests\WindowsServer.Nuget.Tests.dll /TestCaseFilter:TestCategory!=Required_4_5_1 /logger:trx&rdquo;
</span><span class='line'>    &ldquo;-filter:+[Microsoft.AI&lt;em>]&lt;/em> -[&lt;em>Tests]&lt;/em> -[&lt;em>TestFramework&lt;/em>]&lt;em> -[&lt;/em>]Microsoft.ApplicationInsights.Extensibility.Implementation.External*&rdquo; -hideskipped:All -output:.\coverage.xml&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>(New-Object System.Net.WebClient).DownloadFile(&ldquo;&lt;a href="https://codecov.io/bash">https://codecov.io/bash&lt;/a>&rdquo;, &ldquo;.\CodecovUploader.sh&rdquo;)&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>$lastCommit = $(git rev-parse HEAD)&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>$branchNames = $(git branch &ndash;all &ndash;contains $lastCommit)&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>$i=0
</span><span class='line'>Foreach ($branchName in $branchNames)
</span><span class='line'>{
</span><span class='line'>    $i++
</span><span class='line'>    if ($i -gt 1)
</span><span class='line'>    {
</span><span class='line'>        $branchName = $branchName.Trim()
</span><span class='line'>        $lastCommitOnBranch = $(git rev-parse $branchName)
</span><span class='line'>        if ($lastCommitOnBranch -eq  $lastCommit)
</span><span class='line'>        {
</span><span class='line'>            if ($branchName.StartsWith(&ldquo;remotes/origin/&rdquo;))
</span><span class='line'>            {
</span><span class='line'>                $branchName = $branchName.Substring(&ldquo;remotes/origin/&rdquo;.Length)
</span><span class='line'>            }&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>        .\CodecovUploader.sh -f coverage.xml -t $env:CODECOVACCESSKEY -X gcov -B $branchName
</span><span class='line'>    }
</span><span class='line'>}
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>}</span></code></pre></td></tr></table></div></figure></p>

<p>It took me some time to get to it :) So let&rsquo;s look at it line by line:</p>

<ol>
<li><p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>..\packages\OpenCover.4.6.519\tools\OpenCover.Console.exe -register:user
</span><span class='line'>  &ldquo;-target:C:\Program Files (x86)\Microsoft Visual Studio 14.0\Common7\IDE\CommonExtensions\Microsoft\TestWindow\vstest.console.exe&rdquo;
</span><span class='line'>  &ldquo;-targetargs:..\a\Release\Src\DependencyCollector\Net40.Tests\Microsoft.ApplicationInsights.DependencyCollector.Net40.Tests.dll  [CUT: all assemblies]&lt;br/>
</span><span class='line'>  ..\a\Release\Src\WindowsServer\WindowsServer.Nuget.Tests\WindowsServer.Nuget.Tests.dll /TestCaseFilter:TestCategory!=Required_4_5_1 /logger:trx&rdquo;
</span><span class='line'>  &ldquo;-filter:+[Microsoft.AI&lt;em>]&lt;/em> -[&lt;em>Tests]&lt;/em> -[&lt;em>TestFramework&lt;/em>]&lt;em> -[&lt;/em>]Microsoft.ApplicationInsights.Extensibility.Implementation.External*&rdquo; -hideskipped:All -output:.\coverage.xml</span></code></pre></td></tr></table></div></figure></p></li>
</ol>


<p>Here I run <code>OpenCover.Console.exe</code> that is unpacked to the package folder during build. You can check description of all arguments <a href="https://github.com/OpenCover/opencover/wiki/Usage">here</a>.</p>

<p>I think I do not need <code>register</code>. I will try to remove it in the next version. I just kept it from the sample that I used as a start point.</p>

<p>In <code>target</code> and <code>targetargs</code> you specify how to run tests. I opened my VSO build, opened test step and copied the command from there.</p>

<p>In <code>targetargs</code> I specify list of all test assemblies. Notice how &ldquo;&rdquo; are placed. It is important! Opening &ldquo; should be before the argument or it will not work.</p>

<p><code>/TestCaseFilter</code> is also an argument for <code>vstest.console.exe</code>. I need it for skipping some tests. If you need other vstest arguments read <a href="https://msdn.microsoft.com/en-us/library/jj155800.aspx">this</a></p>

<p>&ldquo;-filter:+[Microsoft.AI<em>]</em> -[<em>Tests]</em> -[<em>TestFramework</em>]<em> -[</em>]Microsoft.ApplicationInsights.Extensibility.Implementation.External*&rdquo; <a href="https://github.com/OpenCover/opencover/wiki/Usage#understanding-filters">means</a> include all types from assemblies which names start with &ldquo;Microsoft.AI&rdquo; except all assemblies that have &ldquo;Tests&rdquo; or &ldquo;TestFramework&rdquo; in the name (otherwise you wound measure code coverage of unit test projects). Also exclude all types from all assemblies where namespace starts with &ldquo;Microsoft.ApplicationInsights.Extensibility.Implementation.External&rdquo;.</p>

<p>You can improve this by:</p>

<ul>
<li>Pass package folder as a parameter. But I was not sure how to propagate properties from MsBuild step to a Powershell step and did not want to spend much time on it.</li>
<li>OpenCover package version is hardcoded meaning that there will be problems with upgrade.</li>
<li> Path to vstest.console.exe should also be taken from the environment variable (That should be easy; read [this] (<a href="https://msdn.microsoft.com/en-us/Library/vs/alm/Build/scripts/variables">https://msdn.microsoft.com/en-us/Library/vs/alm/Build/scripts/variables</a>) ).</li>
</ul>

]]></content>
  </entry>
  
</feed>
